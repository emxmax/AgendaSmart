---
import {FORM_FIELDS} from '@/utils/form.ts'
import ButtonForm from './ButtonForm.astro'
import Spinner from './Spinner.astro'
---
<Spinner/>
<form method="POST" id="form" class="mt-0 md:mt-0">
  <div
    class="flex flex-col gap-3 lg:gap-2 p-5 shadow-md font-fallback lg:p-5"
  >
  <h2 class="mx-auto font-black text-xl lg:font-bold text-center text-gray-800 sm:text-lg lg:text-lg lg:leading-0">
    <span class="block lg:inline lg:text-base">¿Tienes dudas?</span>
    <span class="block lg:inline lg:text-base">Te escribimos ahora</span>
  </h2>
    {
      FORM_FIELDS.map(({label,id,path1,path2,pattern,type,placeholder,divClass,inputClass,required}) => (
          <label for={id} class="text-sm lg:text-sm text-gray-700">
            {label}
          </label>
          <div class={divClass}>
              <div class="inset-y-0 start-0 flex items-center ps-3.5 lg:gap-0">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2">
              <path d={path1}></path>
              <path d={path2}></path>
              </svg>
              <input
                type={type}
                name={id}
                id={id}
                placeholder={placeholder}
                class={inputClass}
                {...(pattern ? { pattern: pattern } : {})}
                {...(required ? { required: true } : {})}
              />      
              </div>
            </div>  
      ))
    }
    <input type="hidden" name="web" id="web" value="Landing Agenda Smart">
    <section class="flex">
     <ButtonForm text="Enviar" />
    </section>
    <div  id="result"></div>
  </div>
</form>
<script is:inline>
const form = document.getElementById("form");
const result = document.getElementById("result");

form.addEventListener("submit", function (e) {
    e.preventDefault();

    const formData = new FormData(form);
    const object = Object.fromEntries(formData);
    const json = JSON.stringify(object);

    // Mostrar popup y bloquear interacciones
    const popup = document.getElementById("popup");
    popup.style.display = "flex";
    document.body.classList.add("popup-active");

    fetch(
        "https://ap3g6cijf6.execute-api.us-east-2.amazonaws.com/dev/submit-form",
        {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
            body: json,
        }
    )
    .then(async (response) => {
        let json = await response.json();
        if (response.status === 200) {
            //result.innerHTML = json.message;
            result.style.display = "block";
            setTimeout(() => {
                window.location.href = "./thanks";
            }, 1000);
        } else {
            console.log(response);
            result.innerHTML = json.message;
            result.style.display = "block";
        }
    })
    .catch((error) => {
        console.log(error);
        result.innerHTML = "¡Ocurrió un error al enviar los datos!";
        result.style.display = "block";
    })
    .finally(() => {
        form.reset();
        setTimeout(() => {
            result.style.display = "none";
        }, 3000);
        popup.style.display = "none";
        document.body.classList.remove("popup-active");
    });
});
</script>